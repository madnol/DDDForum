generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  username   String   @unique
  firstName  String
  lastName   String
  password   String
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  // Define a one-to-one relationship with Member
  member Member?

  // @@map("users")
}

model Member {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @unique // relation scalar field (used in the `@relation` attribute above)
  posts    Post[]
  votes    Vote[]
  comments Comment[]
}

model Post {
  id             Int       @id @default(autoincrement())
  memberPostedBy Member    @relation(fields: [memberId], references: [id])
  memberId       Int // Foreign key to the Member table
  postType       String // 'Text' or 'Link'
  title          String
  content        String
  comments       Comment[]
  dateCreated    DateTime  @default(now())
  votes          Vote[]
}

model Comment {
  id Int @id @default(autoincrement())

  // Foreign key relation to the Post table
  // Foreign key to the Post table
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
  text   String

  memberPostedBy Member @relation(fields: [memberId], references: [id])
  memberId       Int // Foreign key to the Member table

  parentCommentId Int?
  parentComment   Comment? @relation("Replies", fields: [parentCommentId], references: [id])

  replyComments Comment[] @relation("Replies")
}

model Vote {
  id Int @id @default(autoincrement())

  postId        Int // Foreign key to the Post table
  postBelongsTo Post @relation(fields: [postId], references: [id])

  memberId       Int
  memberPostedBy Member @relation(fields: [memberId], references: [id])

  voteType String // 'Upvote' or 'Downvote'
}
